<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">


    <!--占位符加载数据库的连接参数，不能写死的那块-->
    <bean id="propertyConfiguer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <!--忽略掉不能处理的占位-->
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <!--配置文件的位置-->
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
            </list>
        </property>
    </bean>
    <!--这里要小心要放数据库配置文件后面不然出错-->
    <!--<import resource="redis.xml"></import>-->

    <!--配置db数据源，一般数据源采用阿里巴巴的druid数据池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc_url}"/>
        <property name="username" value="${jdbc_username}"/>
        <property name="password" value="${jdbc_password}"/>
        <property name="initialSize" value="3"/>
        <property name="minIdle" value="3"/>
        <!--实际项目中的最大连接数要结合项目的使用人数来定-->
        <property name="maxActive" value="20"/>
        <property name="maxWait" value="60000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter" />
            </list>
        </property>
    </bean>

    <!--mapper相关的xml文件的查找-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:mapper/*.xml" />
    </bean>

    <!--mapper相关的java文件的查找-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.xjy.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>



    <!-- druid 监控 sql的执行情况-->
    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <!--超过3000为慢sql为记录下来-->
        <property name="slowSqlMillis" value="3000" />
        <!--用log记录慢sql-->
        <property name="logSlowSql" value="true" />
        <!--合并慢sql-->
        <property name="mergeSql" value="true" />
    </bean>

    <!-- =========JDBC版Quartz=========== -->
    <!--
        持久化数据配置，需要添加quartz.properties
     -->
    <bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="quartzProperties">
            <props>
                <prop key="org.quartz.scheduler.instanceName">XjyScheduler</prop>
                <prop key="org.quartz.scheduler.instanceId">AUTO</prop>
                <!-- 线程池配置 -->
                <prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
                <prop key="org.quartz.threadPool.threadCount">20</prop>
                <prop key="org.quartz.threadPool.threadPriority">5</prop>
                <!-- JobStore 配置 -->
                <prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreTX</prop>
                <!-- 集群配置 -->
                <prop key="org.quartz.jobStore.isClustered">true</prop>
                <prop key="org.quartz.jobStore.clusterCheckinInterval">15000</prop>
                <prop key="org.quartz.jobStore.maxMisfiresToHandleAtATime">1</prop>
                <prop key="org.quartz.jobStore.misfireThreshold">12000</prop>
                <!-- 表前缀 -->
                <prop key="org.quartz.jobStore.tablePrefix">qrtz_</prop>
                <!--生产环境关闭更新校验-->
                <prop key="org.quartz.scheduler.skipUpdateCheck">false</prop>
                <prop key="org.quartz.scheduler.makeSchedulerThreadDaemon">true</prop>
            </props>
        </property>
        <property name="schedulerName" value="XjyScheduler" />
        <!--延时启动 -->
        <property name="startupDelay" value="30" />
        <property name="applicationContextSchedulerContextKey" value="applicationContextKey" />
        <!--可选，QuartzScheduler 启动时更新己存在的Job，这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了 -->
        <property name="overwriteExistingJobs" value="true" />
        <!-- 设置自动启动   默认为true -->
        <property name="autoStartup" value="true" />
    </bean>
</beans>